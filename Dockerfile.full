# global args
ARG __BUILD_DIR__="/build"
ARG __PREFIX__="/usr/local/toolchain"
ARG __WORK_DIR__="/work"



FROM fscm/centos:8 as build

ARG __BUILD_DIR__
ARG __PREFIX__
ARG __WORK_DIR__
ARG ATTR_VERSION="2.4.48"
ARG AUTOCONF_VERSION="2.69"
ARG AUTOMAKE_VERSION="1.16.2"
ARG BISON_VERSION="3.6.3"
ARG BZIP2_VERSION="1.0.8"
ARG EXPAT_VERSION="2.2.9"
ARG GDBM_VERSION="1.18.1"
ARG GETTEXT_VERSION="0.20.2"
ARG LIBEVENT_VERSION="2.1.11"
ARG LIFFI_VERSION="3.3"
#ARG LIBUUID_VERSION="1.6.2"
ARG LIBUUID_VERSION="1.0.3"
ARG LIBUV_VERSION="1.38.0"
ARG NCURSES_VERSION="6.2"
ARG OPENSSL_VERSION="1.1.1g"
ARG PATCH_VERSION="2.7.6"
ARG PERL_VERSION="5.30.3"
ARG PYTHON3_VERSION="3.8.3"
ARG READLINE_VERSION="8.0"
ARG SQLITE_VERSION="3320300"
ARG XZ_VERSION="5.2.5"
ARG __SOURCE_DIR__="${__WORK_DIR__}/src"
ARG __USER__="root"

ENV \
  LANG="C.utf8" \
  LC_ALL="C.utf8" \
  PATH="${__PREFIX__}/bin:${PATH}"

USER ${__USER__}

#COPY --chown="${__USER__}":${__USER__} "LICENSE" "files/" "${__WORK_DIR__}/"
COPY "LICENSE" "files/" "${__WORK_DIR__}/"
COPY --from=fscm/toolchain:slim "${__PREFIX__}" "${__BUILD_DIR__}/${__PREFIX__}"
COPY --from=busybox:uclibc "/bin/busybox" "${__WORK_DIR__}/"

WORKDIR "${__WORK_DIR__}"

RUN \
# build env
  echo '=== setting build env ===' && \
  time { \
    set +h && \
    ln --symbolic --force "${__WORK_DIR__}/busybox" "/usr/bin/sh" && \
    export __DCACHE_LINESIZE__="$(getconf LEVEL1_DCACHE_LINESIZE)" && \
    export __NPROC__="$(getconf _NPROCESSORS_ONLN || echo 1)" && \
    export __PKG_VERSION__="fscm-$(date +%Y.%m.%d)" && \
    export CONFIG_SITE="${__WORK_DIR__}/autoconf/config.site" ; \
    #export MAKEFLAGS="--silent --output-sync --no-print-directory --jobs ${__NPROC__}" && \
    export MAKEFLAGS="--silent --no-print-directory --jobs ${__NPROC__}" && \
    export TIMEFORMAT='=== time taken: %lR (s:%lS u:%lU)' ; \
  } && \
# build structure
  echo '=== creating build structure ===' && \
  time { \
    for folder in ${__PREFIX__}; do install --directory --owner="${__USER__}" --group="${__USER__}" --mode=0755 "${__BUILD_DIR__}${folder}"; install --directory --owner="${__USER__}" --group="${__USER__}" --mode=0755 "$(dirname ${folder})"; ln --symbolic "${__BUILD_DIR__}${folder}" "${folder}"; done && \
    for folder in bin sbin; do install --directory --owner="${__USER__}" --group="${__USER__}" --mode=0755 "${__BUILD_DIR__}/usr/${folder}"; ln --symbolic "usr/${folder}" "${__BUILD_DIR__}/${folder}"; done && \
    for folder in tmp ${__WORK_DIR__}; do install --directory --owner="${__USER__}" --group="${__USER__}" --mode=1777 "${__BUILD_DIR__}/${folder}"; done ; \
  } && \
# copy tests
  echo '=== copying test files ===' && \
  time { \
    install --owner="${__USER__}" --group="${__USER__}" --mode=0755 --target-directory="${__BUILD_DIR__}/usr/bin" ${__WORK_DIR__}/tests/full/* ; \
  } && \
# dependencies
  echo '=== instaling dependencies ===' && \
  time { \
    yum --assumeyes --quiet --enablerepo=PowerTools install \
      coreutils-single \
      curl \
      diffutils \
      file \
      findutils \
      flex \
      gawk \
      gzip \
      sed \
      tar \
      wget \
      xz ; \
  } && \
# ncurses
  echo '=== installing ncurses ===' && \
  time { \
    install --directory "${__SOURCE_DIR__}/ncurses/_build" && \
    curl --silent --location --retry 3 "https://ftp.gnu.org/pub/gnu/ncurses/ncurses-${NCURSES_VERSION}.tar.gz" \
      | tar xz --no-same-owner --strip-components=1 -C "${__SOURCE_DIR__}/ncurses" && \
    cd "${__SOURCE_DIR__}/ncurses/_build" && \
    sed -i.orig -e '/^SHLIB_LIST/ s/@SHLIB_LIST@//' ../{c++,form,menu,panel}/Makefile.in && \
    sed -i.orig -e '/^TICDIR=/ s,/lib/,/lib64/,' ../misc/run_tic.in && \
    ../configure \
      --quiet \
      --with-abi-version=6 \
      --with-cxx-shared \
      --with-manpage-format=normal \
      --with-ospeed=unsigned \
      --with-shared \
      --with-terminfo-dirs="/etc/terminfo:${__PREFIX__}/share/terminfo" \
      --with-termlib=tinfo \
      --with-ticlib=tic \
      --with-xterm-kbs=DEL \
      --without-ada \
      --without-debug \
      --without-profile \
      --without-tests \
      --enable-colorfgbg \
      --enable-hard-tabs \
      --enable-pc-files \
      --enable-xmc-glitch \
      --enable-widec \
      --disable-overwrite \
      --disable-termcap \
      --disable-wattr-macros && \
    make libs > /dev/null && \
    make -C './progs' > /dev/null && \
    make install.{libs,progs,data,includes} > /dev/null && \
    for f in $(find "${__PREFIX__}/include/ncursesw" -type f); do lib="$(basename ${f})"; ln --symbolic "ncursesw/${lib}" "${__PREFIX__}/include/${lib}"; done && \
    for l in $(find "${__PREFIX__}/include/ncursesw" -type l); do lib="$(basename ${l})"; dest="$(readlink ${l})"; ln --symbolic "ncursesw/${dest}" "${__PREFIX__}/include/${lib}"; done && \
    ln --symbolic "ncursesw" "${__PREFIX__}/include/ncurses" && \
    install --directory --owner="${__USER__}" --group="${__USER__}" --mode=0755 "${__PREFIX__}/licenses/ncurses" && \
    (cd .. && find ./ -type f -a \( -name '*LICENSE*' -o -name '*COPYING*' \) -exec cp --parents {} "${__PREFIX__}/licenses/ncurses" ';') && \
    cd ~- && \
    rm -rf "${__SOURCE_DIR__}/ncurses" ; \
  } && \
# readline
  echo '=== installing readline ===' && \
  time { \
    install --directory "${__SOURCE_DIR__}/readline/_build" && \
    curl --silent --location --retry 3 "https://ftp.gnu.org/gnu/readline/readline-${READLINE_VERSION}.tar.gz" \
      | tar xz --no-same-owner --strip-components=1 -C "${__SOURCE_DIR__}/readline" && \
    cd "${__SOURCE_DIR__}/readline/_build" && \
    ../configure \
      --quiet \
      --with-curses \
      --enable-multibyte \
      --enable-shared \
      --enable-static \
      --disable-install-examples && \
    make SHLIB_LIBS='-lncursesw' > /dev/null && \
    make SHLIB_LIBS='-lncursesw' install > /dev/null && \
    install --directory --owner="${__USER__}" --group="${__USER__}" --mode=0755 "${__PREFIX__}/licenses/readline" && \
    (cd .. && find ./ -type f -a \( -name '*LICENSE*' -o -name '*COPYING*' \) -exec cp --parents {} "${__PREFIX__}/licenses/readline" ';') && \
    cd ~- && \
    rm -rf "${__SOURCE_DIR__}/readline" ; \
  } && \
# gettext
  echo '=== installing gettext ===' && \
  time { \
    install --directory "${__SOURCE_DIR__}/gettext/_build" && \
    curl --silent --location --retry 3 "https://ftp.gnu.org/pub/gnu/gettext/gettext-${GETTEXT_VERSION}.tar.xz" \
      | tar xJ --no-same-owner --strip-components=1 -C "${__SOURCE_DIR__}/gettext" && \
    cd "${__SOURCE_DIR__}/gettext/_build" && \
    ../configure \
      --quiet \
      --with-pic \
      --with-included-gettext \
      --without-emacs \
      --enable-shared \
      --enable-static \
      --disable-acl \
      --disable-csharp \
      --disable-java \
      --disable-native-java \
      --disable-nls \
      --disable-rpath && \
    make > /dev/null && \
    make install-strip EXAMPLESFILES="" > /dev/null && \
    install --directory --owner="${__USER__}" --group="${__USER__}" --mode=0755 "${__PREFIX__}/licenses/gettext" && \
    (cd .. && find ./ -type f -a \( -name '*LICENSE*' -o -name '*COPYING*' \) -exec cp --parents {} "${__PREFIX__}/licenses/gettext" ';') && \
    cd ~- && \
    rm -rf "${__SOURCE_DIR__}/gettext" ; \
  } && \
# bzip2
  echo '=== installing bzip2 ===' && \
  time { \
    install --directory "${__SOURCE_DIR__}/bzip2" && \
    curl --silent --location --retry 3 "https://sourceware.org/pub/bzip2/bzip2-${BZIP2_VERSION}.tar.gz" \
      | tar xz --no-same-owner --strip-components=1 -C "${__SOURCE_DIR__}/bzip2" && \
    cd "${__SOURCE_DIR__}/bzip2" && \
    _cflags_="$(cat ${CONFIG_SITE} | sed -n -e '/^CFLAGS=/ s/.*"\(.*\)".*/\1/p')" && \
    sed -i.orig -e '/ln -s/ s,$(PREFIX)/bin/,,' -e 's,$(PREFIX)/man,$(PREFIX)/_delete_/share/man,g' -e 's,$(PREFIX)/lib,$(PREFIX)/lib64,g' -e "/^CFLAGS=/ s/=.*[$]/=${_cflags_} \$/" Makefile && \
    sed -i.orig -e '/(CC) -shared/ s/(CC)/(CC) \$(CFLAGS)/' -e "/^CFLAGS=/ s/PIC.*[$]/PIC ${_cflags_} \$/" Makefile-libbz2_so && \
    unset _cflags_ && \
    make --file='Makefile-libbz2_so' all > /dev/null && \
    make clean > /dev/null && \
    make > /dev/null && \
    make PREFIX="${__PREFIX__}" install > /dev/null && \
    install --owner="${__USER__}" --group="${__USER__}" --mode=0755 --no-target-directory "./bzip2-shared" "${__BUILD_DIR__}${__PREFIX__}/bin/bzip2" && \
    cp --archive ./libbz2.so* "${__BUILD_DIR__}${__PREFIX__}/lib64/" && \
    ln --symbolic "libbz2.so.${BZIP2_VERSION}" "${__BUILD_DIR__}${__PREFIX__}/lib64/libbz2.so" && \
    install --directory --owner="${__USER__}" --group="${__USER__}" --mode=0755 "${__PREFIX__}/licenses/bzip2" && \
    (find ./ -type f -a \( -name '*LICENSE*' -o -name '*COPYING*' \) -exec cp --parents {} "${__PREFIX__}/licenses/bzip2" ';') && \
    cd ~- && \
    rm -rf "${__SOURCE_DIR__}/bzip2" ; \
  } && \
# gdbm
echo '=== installing gdbm ===' && \
time { \
  install --directory "${__SOURCE_DIR__}/gdbm/_build" && \
  curl --silent --location --retry 3 "https://ftp.gnu.org/gnu/gdbm/gdbm-${GDBM_VERSION}.tar.gz" \
    | tar xz --no-same-owner --strip-components=1 -C "${__SOURCE_DIR__}/gdbm" && \
  cd "${__SOURCE_DIR__}/gdbm/_build" && \
  sed -i.orig -e '/^char.*parseopt_program_\(doc\|args\)/d' ../src/parseopt.c && \
  ../configure \
    --quiet \
    --enable-libgdbm-compat \
    --enable-shared \
    --enable-silent-rules \
    --enable-static \
    --disable-nls \
    --disable-rpath && \
  make > /dev/null && \
  make install-strip > /dev/null && \
  install --directory --owner="${__USER__}" --group="${__USER__}" --mode=0755 "${__PREFIX__}/licenses/gdbm" && \
  (cd .. && find ./ -type f -a \( -name '*LICENSE*' -o -name '*COPYING*' \) -exec cp --parents {} "${__PREFIX__}/licenses/gdbm" ';') && \
  cd ~- && \
  rm -rf "${__SOURCE_DIR__}/gdbm" ; \
} && \
# perl
  echo '=== installing perl ===' && \
  time { \
    install --directory "${__SOURCE_DIR__}/perl" && \
    curl --silent --location --retry 3 "https://www.cpan.org/src/5.0/perl-${PERL_VERSION}.tar.xz" \
      | tar xJ --no-same-owner --strip-components=1 -C "${__SOURCE_DIR__}/perl" && \
    cd "${__SOURCE_DIR__}/perl" && \
    sed -i.orig -e '/^libswanted=/ s/ nsl//' -e '' ./Configure && \
    sed -i.orig -e '/^BUILD_ZLIB/ s/True/False/' -e "/^INCLUDE/ s,=.*,= ${__PREFIX__}/include," -e "/^LIB/ s,=.*,= ${__PREFIX__}/lib64," ./cpan/Compress-Raw-Zlib/config.in && \
    rm -rf './cpan/Compress-Raw-Zlib/zlib-src' && \
    rm -rf './cpan/Compress-Raw-Bzip2/bzip2-src' && \
    sed -i.orig -e '/\(bzip2\|zlib\)-src/d' ./MANIFEST && \
    export PERL_BUILD_PACKAGING=1 && \
    export BUILD_BZIP2=0 && \
    export BZIP2_LIB="${__PREFIX__}/lib64" && \
    export BZIP2_INCLUDE="${__PREFIX__}/include" && \
    ./Configure \
      -des \
      -Darchlib="${__PREFIX__}/lib64/perl${PERL_VERSION%%.*}/core" \
      -Dccdlflags='-rdynamic -Wl,-z,relro  -Wl,-z,now' \
      -Dccflags='-O2 -g0 -s -w -pipe -m64 -mtune=generic -DNDEBUG' \
      -Dcf_by="${__PKG_VERSION__}" \
      -Dd_semctl_semun \
      -Dinstallman1dir="${__PREFIX__}/_delete_/share/man/man1" \
      -Dinstallman3dir="${__PREFIX__}/_delete_/share/man/man3" \
      -Dlddlflags='-shared -rdynamic -Wl,-z,relro  -Wl,-z,now' \
      -Dldflags='-rdynamic -Wl,-z,relro  -Wl,-z,now' \
      -Dlibpth="${__PREFIX__}/lib64 /usr/local/lib64 /usr/lib64 /lib64 /usr/local/lib /usr/lib /lib" \
      -Dman1dir="${__PREFIX__}/_delete_/share/man/man1" \
      -Dman1ext='1' \
      -Dman3dir="${__PREFIX__}/_delete_/share/man/man3" \
      -Dman3ext='3pm' \
      -Dmyhostname='localhost' \
      -Doptimize='none' \
      -Dpager='/usr/bin/less' \
      -Dperlpath="${__PREFIX__}/bin/perl" \
      -Dprefix="${__PREFIX__}" \
      -Dprivlib="${__PREFIX__}/share/perl${PERL_VERSION%%.*}/core" \
      -Dscriptdir="${__PREFIX__}/bin" \
      -Dshrpdir="${__PREFIX__}/lib64" \
      -Dsed='/usr/bin/sed' \
      -Dsitearch="${__PREFIX__}/lib64/perl${PERL_VERSION%%.*}/site" \
      -Dsitelib="${__PREFIX__}/share/perl${PERL_VERSION%%.*}/site" \
      -Dsiteprefix="${__PREFIX__}" \
      -Ubincompat5005 \
      -Dstartperl='#!'"${__PREFIX__}/bin/perl" \
      -Duse64bitint \
      -Duseithreads \
      -Duselargefiles \
      -Duseshrplib \
      -Dusethreads \
      -Dvendorarch="${__PREFIX__}/lib64/perl${PERL_VERSION%%.*}/vendor" \
      -Dvendorlib="${__PREFIX__}/share/perl${PERL_VERSION%%.*}/vendor" \
      -Dvendorprefix="${__PREFIX__}" > /dev/null && \
    make libperl.so > /dev/null && \
    make > /dev/null && \
    make install > /dev/null && \
    unset PERL_BUILD_PACKAGING && \
    unset BUILD_BZIP2 && \
    unset BZIP2_LIB && \
    unset BZIP2_INCLUDE && \
    for header in asm/termios.h syscall.h syslimits.h syslog.h sys/ioctl.h sys/socket.h sys/time.h wait.h; do h2ph -a -d "${__PREFIX__}/lib64/perl${PERL_VERSION%%.*}/core" ${header} > /dev/null || true; done && \
    install --directory --owner="${__USER__}" --group="${__USER__}" --mode=0755 "${__BUILD_DIR__}${__PREFIX__}/lib64/perl${PERL_VERSION%%.*}/vendor/auto" && \
    install --directory --owner="${__USER__}" --group="${__USER__}" --mode=0755 "${__BUILD_DIR__}${__PREFIX__}/share/perl${PERL_VERSION%%.*}/vendor" && \
    mv "${__PREFIX__}/lib64/perl${PERL_VERSION%%.*}/core/CORE/libperl.so" "${__BUILD_DIR__}${__PREFIX__}/lib64/libperl.so.${PERL_VERSION}" && \
    ln --symbolic "libperl.so.${PERL_VERSION}" "${__BUILD_DIR__}${__PREFIX__}/lib64/libperl.so.${PERL_VERSION%%.*}" && \
    ln --symbolic "libperl.so.${PERL_VERSION}" "${__BUILD_DIR__}${__PREFIX__}/lib64/libperl.so" && \
    ln --symbolic "../../../libperl.so.${PERL_VERSION}" "${__BUILD_DIR__}${__PREFIX__}/lib64/perl${PERL_VERSION%%.*}/core/CORE/libperl.so" && \
    install --directory --owner="${__USER__}" --group="${__USER__}" --mode=0755 "${__PREFIX__}/licenses/perl" && \
    (find ./ -type f -a \( -name '*LICENSE*' -o -iname '*COPYING*' \) -exec cp --parents {} "${__PREFIX__}/licenses/perl" ';') && \
    cd ~- && \
    rm -rf "${__SOURCE_DIR__}/perl" ; \
  } && \
# autoconf
  echo '=== installing autoconf ===' && \
  time { \
    install --directory "${__SOURCE_DIR__}/autoconf/_build" && \
    curl --silent --location --retry 3 "https://ftp.gnu.org/gnu/autoconf/autoconf-${AUTOCONF_VERSION}.tar.xz" \
      | tar xJ --no-same-owner --strip-components=1 -C "${__SOURCE_DIR__}/autoconf" && \
    cd "${__SOURCE_DIR__}/autoconf/_build" && \
    ../configure \
      --quiet && \
    make > /dev/null && \
    make install-strip > /dev/null && \
    install --directory --owner="${__USER__}" --group="${__USER__}" --mode=0755 "${__PREFIX__}/licenses/autoconf" && \
    (cd .. && find ./ -type f -a \( -name '*LICENSE*' -o -name '*COPYING*' \) -exec cp --parents {} "${__PREFIX__}/licenses/autoconf" ';') && \
    cd ~- && \
    rm -rf "${__SOURCE_DIR__}/autoconf" ; \
  } && \
# automake
  echo '=== installing automake ===' && \
  time { \
    install --directory "${__SOURCE_DIR__}/automake/_build" && \
    curl --silent --location --retry 3 "https://ftp.gnu.org/gnu/automake/automake-${AUTOMAKE_VERSION}.tar.xz" \
      | tar xJ --no-same-owner --strip-components=1 -C "${__SOURCE_DIR__}/automake" && \
    cd "${__SOURCE_DIR__}/automake/_build" && \
    ../configure \
      --quiet \
      --enable-silent-rules && \
    make > /dev/null && \
    make install-strip > /dev/null && \
    install --directory --owner="${__USER__}" --group="${__USER__}" --mode=0755 "${__PREFIX__}/licenses/automake" && \
    (cd .. && find ./ -type f -a \( -name '*LICENSE*' -o -name '*COPYING*' \) -exec cp --parents {} "${__PREFIX__}/licenses/automake" ';') && \
    cd ~- && \
    rm -rf "${__SOURCE_DIR__}/automake" ; \
  } && \
# bison
  echo '=== installing bison ===' && \
  time { \
    install --directory "${__SOURCE_DIR__}/bison/_build" && \
    curl --silent --location --retry 3 "https://ftp.gnu.org/gnu/bison/bison-${BISON_VERSION}.tar.xz" \
      | tar xJ --no-same-owner --strip-components=1 -C "${__SOURCE_DIR__}/bison" && \
    cd "${__SOURCE_DIR__}/bison/_build" && \
    ../configure \
      --quiet \
      --enable-silent-rules && \
    make > /dev/null && \
    make install-strip > /dev/null && \
    install --directory --owner="${__USER__}" --group="${__USER__}" --mode=0755 "${__PREFIX__}/licenses/bison" && \
    (cd .. && find ./ -type f -a \( -name '*LICENSE*' -o -name '*COPYING*' \) -exec cp --parents {} "${__PREFIX__}/licenses/bison" ';') && \
    cd ~- && \
    rm -rf "${__SOURCE_DIR__}/bison" ; \
  } && \
# attr # <- create test
  echo '=== installing attr ===' && \
  time { \
    install --directory "${__SOURCE_DIR__}/attr/_build" && \
    curl --silent --location --retry 3 "https://namesdir.com/mirrors/nongnu/attr/attr-${ATTR_VERSION}.tar.gz" \
      | tar xz --no-same-owner --strip-components=1 -C "${__SOURCE_DIR__}/attr" && \
    cd "${__SOURCE_DIR__}/attr/_build" && \
    ../configure \
      --quiet \
      --enable-shared \
      --enable-silent-rules \
      --enable-static \
      --disable-nls \
      --disable-rpath && \
    make > /dev/null && \
    make install-strip > /dev/null && \
    install --directory --owner="${__USER__}" --group="${__USER__}" --mode=0755 "${__PREFIX__}/licenses/attr" && \
    (cd .. && find ./ -type f -a \( -name '*LICENSE*' -o -name '*COPYING*' \) -exec cp --parents {} "${__PREFIX__}/licenses/attr" ';') && \
    cd ~- && \
    rm -rf "${__SOURCE_DIR__}/attr" ; \
  } && \
# patch # <- create test
  echo '=== installing patch ===' && \
  time { \
    install --directory "${__SOURCE_DIR__}/patch/_build" && \
    curl --silent --location --retry 3 "https://ftp.gnu.org/gnu/patch/patch-${PATCH_VERSION}.tar.xz" \
      | tar xJ --no-same-owner --strip-components=1 -C "${__SOURCE_DIR__}/patch" && \
    cd "${__SOURCE_DIR__}/patch/_build" && \
    ../configure \
      --quiet \
      --disable-silent-rules && \
    make > /dev/null && \
    make install-strip > /dev/null && \
    install --directory --owner="${__USER__}" --group="${__USER__}" --mode=0755 "${__PREFIX__}/licenses/patch" && \
    (cd .. && find ./ -type f -a \( -name '*LICENSE*' -o -name '*COPYING*' \) -exec cp --parents {} "${__PREFIX__}/licenses/patch" ';') && \
    cd ~- && \
    rm -rf "${__SOURCE_DIR__}/patch" ; \
  } && \
# expat
  echo '=== installing expat ===' && \
  time { \
    install --directory "${__SOURCE_DIR__}/expat/_build" && \
    curl --silent --location --retry 3 "https://prdownloads.sourceforge.net/expat/expat-${EXPAT_VERSION}.tar.xz" \
      | tar xJ --no-same-owner --strip-components=1 -C "${__SOURCE_DIR__}/expat" && \
    cd "${__SOURCE_DIR__}/expat/_build" && \
    ../configure \
      --quiet \
      --without-docbook \
      --enable-shared \
      --enable-silent-rules \
      --enable-static && \
    make > /dev/null && \
    make install-strip > /dev/null && \
    install --directory --owner="${__USER__}" --group="${__USER__}" --mode=0755 "${__PREFIX__}/licenses/expat" && \
    (cd .. && find ./ -type f -a \( -name '*LICENSE*' -o -name '*COPYING*' \) -exec cp --parents {} "${__PREFIX__}/licenses/expat" ';') && \
    cd ~- && \
    rm -rf "${__SOURCE_DIR__}/expat" ; \
  } && \
# libffi
  echo '=== installing libffi ===' && \
  time { \
    install --directory "${__SOURCE_DIR__}/libffi/_build" && \
    curl --silent --location --retry 3 "https://sourceware.org/pub/libffi/libffi-${LIFFI_VERSION}.tar.gz" \
      | tar xz --no-same-owner --strip-components=1 -C "${__SOURCE_DIR__}/libffi" && \
    cd "${__SOURCE_DIR__}/libffi/_build" && \
    ../configure \
      --quiet \
      --with-gcc-arch='x86-64' \
      --enable-shared \
      --enable-silent-rules \
      --enable-static && \
    make > /dev/null && \
    make install-strip > /dev/null && \
    install --directory --owner="${__USER__}" --group="${__USER__}" --mode=0755 "${__PREFIX__}/licenses/libffi" && \
    (cd .. && find ./ -type f -a \( -name '*LICENSE*' -o -name '*COPYING*' \) -exec cp --parents {} "${__PREFIX__}/licenses/libffi" ';') && \
    cd ~- && \
    rm -rf "${__SOURCE_DIR__}/libffi" ; \
  } && \
# # libuuid # <- create test
#   echo '=== installing libuuid ===' && \
#   time { \
#     install --directory "${__SOURCE_DIR__}/libuuid/_build" && \
#     curl --silent --location --retry 3 "https://www.mirrorservice.org/sites/ftp.ossp.org/pkg/lib/uuid/uuid-${LIBUUID_VERSION}.tar.gz" \
#       | tar xz --no-same-owner --strip-components=1 -C "${__SOURCE_DIR__}/libuuid" && \
#     cd "${__SOURCE_DIR__}/libuuid/_build" && \
#     ../configure \
#       --quiet \
#       --with-cxx \
#       --with-dce \
#       --with-perl \
#       --with-perl-compat \
#       --enable-shared \
#       --enable-static && \
#     make LIBTOOL="${__PREFIX__}/bin/libtool" INSTALLDIRS='vendor' > /dev/null && \
#     make LIBTOOL="${__PREFIX__}/bin/libtool" INSTALLDIRS='vendor' install > /dev/null && \
#     #perl -MData::UUID -e 'print "Testing compatibility of Data::UUID version $Data::UUID::VERSION\n";' && \
#     install --directory --owner="${__USER__}" --group="${__USER__}" --mode=0755 "${__PREFIX__}/licenses/libuuid" && \
#     (cd .. && find ./ -type f -name '*README*' -exec cp --parents {} "${__PREFIX__}/licenses/libuuid" ';') && \
#     cd ~- && \
#     rm -rf "${__SOURCE_DIR__}/libuuid" ; \
#   } && \
# libuuid # <- create test
  echo '=== installing libuuid ===' && \
  time { \
    install --directory "${__SOURCE_DIR__}/libuuid/_build" && \
    curl --silent --location --retry 3 "https://prdownloads.sourceforge.net/libuuid/libuuid-${LIBUUID_VERSION}.tar.gz" \
      | tar xz --no-same-owner --strip-components=1 -C "${__SOURCE_DIR__}/libuuid" && \
    cd "${__SOURCE_DIR__}/libuuid/_build" && \
    ../configure \
      --quiet \
      --enable-shared \
      --enable-silent-rules \
      --enable-static && \
    make > /dev/null && \
    make install-strip > /dev/null && \
    install --directory --owner="${__USER__}" --group="${__USER__}" --mode=0755 "${__PREFIX__}/licenses/libuuid" && \
    (cd .. && find ./ -type f -a \( -name '*LICENSE*' -o -name '*COPYING*' \) -exec cp --parents {} "${__PREFIX__}/licenses/libuuid" ';') && \
    cd ~- && \
    rm -rf "${__SOURCE_DIR__}/libuuid" ; \
  } && \
# openssl
  echo '=== installing openssl ===' && \
  time { \
    install --directory "${__SOURCE_DIR__}/openssl/_build" && \
    curl --silent --location --retry 3 "https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz" \
      | tar xz --no-same-owner --strip-components=1 -C "${__SOURCE_DIR__}/openssl" && \
    cd "${__SOURCE_DIR__}/openssl/_build" && \
    sed -i.orig -e '/\(MAN\|DOC\)DIR=/ s,/share/,/_delete_/share/,g' ../Configurations/unix-Makefile.tmpl && \
    ../config \
      --prefix="${__PREFIX__}" \
      --libdir="${__PREFIX__}/lib64" \
      --openssldir="${__PREFIX__}/etc/ssl" \
      --release \
      enable-cms \
      enable-ec_nistp_64_gcc_128 \
      enable-rfc3779 \
      no-weak-ssl-ciphers \
      no-ssl3 \
      shared \
      zlib \
      -DOPENSSL_NO_HEARTBEATS && \
    make > /dev/null && \
    make install_sw > /dev/null && \
    make install_ssldirs > /dev/null && \
    find "${__BUILD_DIR__}${__PREFIX__}/etc" -type f -name '*.dist' -delete && \
    install --directory --owner="${__USER__}" --group="${__USER__}" --mode=0755 "${__PREFIX__}/licenses/openssl" && \
    (cd .. && find ./ -type f -a \( -name '*LICENSE*' -o -name '*COPYING*' \) -exec cp --parents {} "${__PREFIX__}/licenses/openssl" ';') && \
    cd ~- && \
    rm -rf "${__SOURCE_DIR__}/openssl" ; \
  } && \
# xz
  echo '=== installing xz ===' && \
  time { \
    install --directory "${__SOURCE_DIR__}/xz/_build" && \
    curl --silent --location --retry 3 "https://tukaani.org/xz/xz-${XZ_VERSION}.tar.xz" \
      | tar xJ --no-same-owner --strip-components=1 -C "${__SOURCE_DIR__}/xz" && \
    cd "${__SOURCE_DIR__}/xz/_build" && \
    ../configure \
      --quiet \
      --enable-shared \
      --enable-silent-rules \
      --enable-static \
      --disable-debug \
      --disable-doc \
      --disable-lzmainfo \
      --disable-nls \
      --disable-rpath && \
    make > /dev/null && \
    make install-strip > /dev/null && \
    install --directory --owner="${__USER__}" --group="${__USER__}" --mode=0755 "${__PREFIX__}/licenses/xz" && \
    (cd .. && find ./ -type f -a \( -name '*LICENSE*' -o -name '*COPYING*' \) -exec cp --parents {} "${__PREFIX__}/licenses/xz" ';') && \
    cd ~- && \
    rm -rf "${__SOURCE_DIR__}/xz" ; \
  } && \
# sqlite # <- create test
  echo '=== installing sqlite ===' && \
  time { \
    install --directory "${__SOURCE_DIR__}/sqlite/_build" && \
    curl --silent --location --retry 3 "https://sqlite.org/2020/sqlite-autoconf-${SQLITE_VERSION}.tar.gz" \
      | tar xz --no-same-owner --strip-components=1 -C "${__SOURCE_DIR__}/sqlite" && \
    cd "${__SOURCE_DIR__}/sqlite/_build" && \
    ../configure \
      --quiet \
      --enable-dynamic-extensions \
      --enable-readline \
      --enable-session \
      --enable-shared \
      --enable-silent-rules \
      --enable-static \
      --disable-debug \
      --disable-editline && \
    make > /dev/null && \
    make install-strip > /dev/null && \
    install --directory --owner="${__USER__}" --group="${__USER__}" --mode=0755 "${__PREFIX__}/licenses/sqlite" && \
    (cd .. && find ./ -type f -a \( -iname '*LICENSE*' -o -name '*README*' \) -exec cp --parents {} "${__PREFIX__}/licenses/sqlite" ';') && \
    cd ~- && \
    rm -rf "${__SOURCE_DIR__}/sqlite" ; \
  } && \
# python3
  echo '=== installing python3 ===' && \
  time { \
    install --directory "${__SOURCE_DIR__}/python3/_build" && \
    curl --silent --location --retry 3 "https://www.python.org/ftp/python/${PYTHON3_VERSION}/Python-${PYTHON3_VERSION}.tar.xz" \
      | tar xJ --no-same-owner --strip-components=1 -C "${__SOURCE_DIR__}/python3" && \
    cd "${__SOURCE_DIR__}/python3/_build" && \
    rm -rf "../Modules/expat" && \
    sed -i.orig -e 's,/lib/,/lib64/,g' ../Lib/distutils/command/install.py && \
    sed -i.orig -e 's,"lib","lib64",g' ../Lib/distutils/sysconfig.py && \
    sed -i.orig -e 's,"lib","lib64",g' ../Lib/distutils/tests/test_install.py && \
    sed -i.orig -e 's,"lib","lib64",g' -e '/return/ s,lib/python,lib64/python,g' -e "/^PREFIXES =/ s|\]|, '${__PREFIX__}'\]|" ../Lib/site.py && \
    sed -i.orig -e 's,/lib/,/lib64/,g' ../Lib/sysconfig.py && \
    sed -i.orig -e "s,'lib','lib64',g" ../Lib/test/test_site.py && \
    sed -i.orig -e '/^SCRIPTDIR=/ s/=.*/= @libdir@/' -e '/^LIBPL=/ s,=.*,= $(LIBDEST)/config-$(LDVERSION),' -e 's,lib/libpython,lib64/libpython,g' ../Makefile.pre.in && \
    sed -i.orig -e 's,"lib/,"lib64/,g' ../Modules/getpath.c && \
    sed -i.orig -e '/LIBPL=/ s,/lib/,/lib64/,' ../configure && \
    sed -i.orig -e '/LIBPL=/ s,/lib/,/lib64/,' ../configure.ac && \
    sed -i.orig -e "s,/lib',/lib64'," -e "s,/lib/,/lib64/," -e "/system_lib_dirs =/ s#\[#\['/usr/local/toolchain/lib64', #" -e "/system_include_dirs =/ s#\[#\['/usr/local/toolchain/include', #" -e "s,/usr/include/,${__PREFIX__}/include/,g" ../setup.py && \
    sed -i.orig -e '/for file in py_files/ s/py_files/sorted(py_files)/' ../Lib/distutils/util.py && \
    sed -i.orig -e '/deterministic parameter not supported/ s/3/10/' ../Lib/sqlite3/test/userfunctions.py && \
    autoreconf --install --force '../' && \
    ../configure \
      --quiet \
      --with-computed-gotos \
      --with-ensurepip='install' \
      --with-ssl-default-suites='openssl' \
      --with-system-expat \
      --with-system-ffi \
      --without-dtrace \
      --without-pydebug \
      --enable-ipv6 \
      --enable-loadable-sqlite-extensions \
      --enable-optimizations \
      --enable-shared && \
    make > /dev/null && \
    make install > /dev/null && \
    find "${__BUILD_DIR__}${__PREFIX__}/lib64/python${PYTHON3_VERSION%.*}" -depth -type d -a \( -name test -o -name tests -o -name __pycache__ \) -exec rm -rf '{}' + && \
    find "${__BUILD_DIR__}${__PREFIX__}/lib64/python${PYTHON3_VERSION%.*}" -depth -type f -a \( -name '*.pyc' -o -name '*.pyo' -o -name '*.bat' -o -name '*LICENSE*' \) -delete && \
    for p in $(find "${__BUILD_DIR__}${__PREFIX__}/bin" -type f -name "*${PYTHON3_VERSION%.*}*"); do \
      s="$(basename ${p})"; \
      t="${__BUILD_DIR__}${__PREFIX__}/bin/$(echo ${s} | sed -e "s/\(\|-\)${PYTHON3_VERSION%.*}//")"; \
      if [ ! -f "${t}" ]; then ln -s "${s}" "${t}"; fi; \
    done && \
    install --directory --owner="${__USER__}" --group="${__USER__}" --mode=0755 "${__PREFIX__}/licenses/python3" && \
    (cd .. && find ./ -type f -a \( -name '*LICENSE*' -o -name '*COPYING*' \) -exec cp --parents {} "${__PREFIX__}/licenses/python3" ';') && \
    cd ~- && \
    rm -rf "${__SOURCE_DIR__}/python3" ; \
  } && \
# libevent
  echo '=== installing libevent ===' && \
  time { \
    install --directory "${__SOURCE_DIR__}/libevent/_build" && \
    curl --silent --location --retry 3 "https://github.com/libevent/libevent/releases/download/release-${LIBEVENT_VERSION}-stable/libevent-${LIBEVENT_VERSION}-stable.tar.gz" \
      | tar xz --no-same-owner --strip-components=1 -C "${__SOURCE_DIR__}/libevent" && \
    cd "${__SOURCE_DIR__}/libevent/_build" && \
    ../configure \
      --quiet \
      --enable-shared \
      --enable-silent-rules \
      --enable-static && \
    make > /dev/null && \
    make install-strip > /dev/null && \
    install --directory --owner="${__USER__}" --group="${__USER__}" --mode=0755 "${__PREFIX__}/licenses/libevent" && \
    (cd .. && find ./ -type f -a \( -name '*LICENSE*' -o -name '*COPYING*' \) -exec cp --parents {} "${__PREFIX__}/licenses/libevent" ';') && \
    cd ~- && \
    rm -rf "${__SOURCE_DIR__}/libevent" ; \
  } && \
# libuv
  echo '=== installing libuv ===' && \
  time { \
    install --directory "${__SOURCE_DIR__}/libuv/_build" && \
    curl --silent --location --retry 3 "https://dist.libuv.org/dist/v${LIBUV_VERSION}/libuv-v${LIBUV_VERSION}.tar.gz" \
      | tar xz --no-same-owner --strip-components=1 -C "${__SOURCE_DIR__}/libuv" && \
    cd "${__SOURCE_DIR__}/libuv/_build" && \
    ../autogen.sh && \
    ../configure \
      --quiet \
      --enable-shared \
      --enable-silent-rules \
      --enable-static && \
    make > /dev/null && \
    make install-strip > /dev/null && \
    install --directory --owner="${__USER__}" --group="${__USER__}" --mode=0755 "${__PREFIX__}/licenses/libuv" && \
    (cd .. && find ./ -type f -a \( -name '*LICENSE*' -o -name '*COPYING*' \) -exec cp --parents {} "${__PREFIX__}/licenses/libuv" ';') && \
    cd ~- && \
    rm -rf "${__SOURCE_DIR__}/libuv" ; \
  } && \
# mozilla root certificates
  echo '=== installing root certificates ===' && \
  time { \
    install --directory "${__SOURCE_DIR__}/certificates/certs" && \
    curl --silent --location --retry 3 "https://github.com/mozilla/gecko-dev/raw/master/security/nss/lib/ckfw/builtins/certdata.txt" \
      --output "${__SOURCE_DIR__}/certificates/certdata.txt" && \
    cd "${__SOURCE_DIR__}/certificates" && \
    for cert in $(sed -n -e '/^# Certificate/=' "${__SOURCE_DIR__}/certificates/certdata.txt"); do \
      awk "NR==${cert},/^CKA_TRUST_STEP_UP_APPROVED/" "${__SOURCE_DIR__}/certificates/certdata.txt" > "${__SOURCE_DIR__}/certificates/certs/${cert}.tmp"; \
    done && \
    for file in "${__SOURCE_DIR__}/certificates/certs/"*.tmp; do \
      _cert_name_=$(sed -n -e '/^# Certificate/{s/ /_/g;s/.*"\(.*\)".*/\1/p}' "${file}"); \
      printf $(awk '/^CKA_VALUE/{flag=1;next}/^END/{flag=0}flag{printf $0}' "${file}") \
        | openssl x509 -inform DER -outform PEM -out "${__SOURCE_DIR__}/certificates/certs/${_cert_name_}.crt"; \
    done && \
    install --directory --owner="${__USER__}" --group="${__USER__}" --mode=0755 "${__BUILD_DIR__}${__PREFIX__}/etc/ssl/certs" && \
    install --owner="${__USER__}" --group="${__USER__}" --mode=0644 --target-directory="${__BUILD_DIR__}${__PREFIX__}/etc/ssl/certs" "${__SOURCE_DIR__}/certificates/certs"/*.crt && \
    c_rehash "${__BUILD_DIR__}${__PREFIX__}/etc/ssl/certs" && \
    cat "${__SOURCE_DIR__}/certificates/certs"/*.crt > "${__BUILD_DIR__}${__PREFIX__}/etc/ssl/certs/certificates.crt" && \
    install --directory --owner="${__USER__}" --group="${__USER__}" --mode=0755 "${__PREFIX__}/licenses/mozilla/certificates" && \
    curl --silent --location --retry 3 "https://raw.githubusercontent.com/spdx/license-list-data/master/text/MPL-2.0.txt" \
      --output "${__PREFIX__}/licenses/mozilla/certificates/MPL-2.0" && \
    cd ~- && \
    rm -rf "${__SOURCE_DIR__}/certificates" ; \
  } && \
# cleanup
  echo '=== cleaning up ===' && \
  time { \
    rm -rf "${__BUILD_DIR__}${__PREFIX__}/_delete_" && \
    find "${__BUILD_DIR__}${__PREFIX__}/lib64" -type f -name '*.la' -delete ; \
  } && \
# busybox
  echo '=== installing busybox ===' && \
  time { \
    install --owner=${__USER__} --group=${__USER__} --mode=0755 --target-directory="${__BUILD_DIR__}/usr/bin" "${__WORK_DIR__}/busybox" && \
    install --directory --owner=${__USER__} --group=${__USER__} --mode=0755 "${__BUILD_DIR__}/licenses/busybox" && \
    curl --silent --location --retry 3 "https://busybox.net/downloads/busybox-$(${__BUILD_DIR__}/usr/bin/busybox --help | head -1 | sed -E -n -e 's/.*v([0-9\.]+) .*/\1/p').tar.bz2" \
      | tar xj --no-same-owner --strip-components=1 -C "${__BUILD_DIR__}/licenses/busybox" --wildcards '*LICENSE*' && \
    for applet in $("${__BUILD_DIR__}"/usr/bin/busybox --list-all); do ln "${__BUILD_DIR__}/usr/bin/busybox" "${__BUILD_DIR__}/${applet}"; done ; \
  } && \
# stripping
  echo '=== stripping libraries and binaries ===' && \
  time { \
    find "${__BUILD_DIR__}${__PREFIX__}/lib64" -type f -name '*.a' -exec strip --strip-debug {} ';' && \
    find "${__BUILD_DIR__}${__PREFIX__}/lib64" -type f -name '*.so*' -exec strip --strip-unneeded {} ';' && \
    find "${__BUILD_DIR__}${__PREFIX__}/bin" -type f -not -links +1 -exec strip --strip-all {} ';' ; \
  } && \
# licenses
  echo '=== project licenses ===' && \
  time { \
    install --owner="${__USER__}" --group="${__USER__}" --mode=0644 --target-directory="${__BUILD_DIR__}${__PREFIX__}/licenses" "${__WORK_DIR__}/LICENSE" && \
    (cd "${__BUILD_DIR__}${__PREFIX__}/licenses" && for project in *; do if [ ! -e "${__BUILD_DIR__}/licenses/${project}" ]; then ln --symbolic "..${__PREFIX__}/licenses/${project}" "${__BUILD_DIR__}/licenses/${project}"; fi; done) ; \
  } && \
# system settings
  echo '=== system settings ===' && \
  time { \
    install --directory --owner="${__USER__}" --group="${__USER__}" --mode=0755 "${__BUILD_DIR__}/run/systemd" && \
    echo 'docker' > "${__BUILD_DIR__}/run/systemd/container" ; \
  } && \
# done
  echo '=== all done! ==='



FROM scratch

ARG __BUILD_DIR__
ARG __PREFIX__
ARG __WORK_DIR__

LABEL \
  maintainer="Frederico Martins <https://hub.docker.com/u/fscm/>" \
  vendor="fscm" \
  cmd="docker container run --interactive --rm --tty fscm/toolchain" \
  params="--volume ./:${__WORK_DIR__}:rw"

COPY --from=build "${__BUILD_DIR__}" "/"

VOLUME ["${__WORK_DIR__}"]

WORKDIR "${__WORK_DIR__}"

ENV \
  LANG="C.utf8" \
  LC_ALL="C.utf8" \
  PATH="${__PREFIX__}/bin:${PATH}"

CMD ["/usr/bin/sh"]
