#!/bin/sh
#
# Shell script to test the Toolchain Docker image.
#
# Copyright 2016-2022, Frederico Martins
#   Author: Frederico Martins <http://github.com/fscm>
#
# SPDX-License-Identifier: MIT
#
# This program is free software. You can use it and/or modify it under the
# terms of the MIT License.
#

# Variables
AUTOCONF_TEST_FILE="configure.ac"
AUTOMAKE_TEST_FILE="Makefile.am"
BISON_TEST_FILE="bison.y"
BZIP2_TEST_FILE="bzip2.txt"
GCC_TEST_FILE="gcc.c"
GXX_TEST_FILE="gxx.cc"
GLIBC_TEST_FILE="glibc.c"
LIBEVENT_TEST_FILE="libevent.c"
LIBEXPAT_TEST_FILE="expat.c"
LIBFFI_TEST_FILE="libffi.c"
LIBUV_TEST_FILE="libuv.c"
MAKE_TEST_FILE="Makefile"
PERL_TEST_FILE="perl.pl"
READLINE_TEST_FILE="readline.c"
XZ_TEST_FILE="xz.txt"


# Functions
create_gcc_test_files() {
  cat << EOF > /tmp/${GCC_TEST_FILE}
#include <stdio.h>
int main() {
  puts("Hello, world!");
  return 0;
}
EOF

  cat << EOF > /tmp/${GXX_TEST_FILE}
#include <iostream>
int main() {
  std::cout << "Hello, world!" << std::endl;
  return 0;
}
EOF
}

create_glibc_test_files() {
  cat << EOF > /tmp/${GLIBC_TEST_FILE}
#define _GNU_SOURCE
#include <assert.h>
#include <gnu/libc-version.h>
#include <stdatomic.h>
#include <stdio.h>
#include <threads.h>

atomic_int acnt;
int cnt;

int f(void* thr_data) {
  for(int n = 0; n < 1000; ++n) {
    ++cnt;
    ++acnt;
  }
  return 0;
}

int main(int argc, char **argv) {
  printf("gnu_get_libc_version() = %s\n", gnu_get_libc_version());
  thrd_t thr[10];
  for(int n = 0; n < 10; ++n)
    thrd_create(&thr[n], f, NULL);
  for(int n = 0; n < 10; ++n)
    thrd_join(thr[n], NULL);
  printf("The atomic counter is %u\n", acnt);
  printf("The non-atomic counter is %u\n", cnt);
}
EOF
}

create_make_test_files() {
  cat << EOF > /tmp/${MAKE_TEST_FILE}
default:
$(printf '\t')@echo 'Hello world!'
EOF
}

create_bison_test_files() {
  cat << EOF > /tmp/${BISON_TEST_FILE}
%{
#include <iostream>
using namespace std;
extern void yyerror (char *s);
extern int yylex ();
%}
%start prog
%%
prog:  /* empty */
    |  prog expr '\\n' { cout << "pass"; exit(0); }
    ;
expr:  '(' ')'
    |  '(' expr ')'
    |  expr expr
    ;
%%
char c;
void yyerror (char *s) { cout << "fail"; exit(0); }
int yylex () { cin.get(c); return c; }
int main() { yyparse(); }
EOF
}

create_bzip2_test_files() {
  cat << EOF > /tmp/${BZIP2_TEST_FILE}
Hello BZip2!
EOF
}

create_perl_test_files() {
  cat << EOF > /tmp/${PERL_TEST_FILE}
print 'Hello Perl!';
EOF
}

create_autoconf_test_files() {
  cat << EOF > /tmp/${AUTOCONF_TEST_FILE}
AC_INIT(auto_test, 1.0)
AM_INIT_AUTOMAKE
AC_PROG_CC
AC_CONFIG_FILES(Makefile)
AC_OUTPUT
EOF
}

create_automake_test_files() {
  cat << EOF > /tmp/${AUTOMAKE_TEST_FILE}
bin_PROGRAMS = auto_test
auto_test_SOURCES = ${GCC_TEST_FILE}
EOF
}

create_libffi_test_files() {
  cat << EOF > /tmp/${LIBFFI_TEST_FILE}
#include <stdio.h>
#include <ffi.h>
void puts_binding(ffi_cif *cif, unsigned int *ret, void* args[], FILE *stream) {
  *ret = fputs(*(char **)args[0], stream);
}
int main() {
  ffi_cif cif;
  ffi_type *args[1];
  ffi_closure *closure;
  int (*bound_puts)(char *);
  int rc;
  closure = ffi_closure_alloc(sizeof(ffi_closure), &bound_puts);
  if (closure) {
    args[0] = &ffi_type_pointer;
    if (ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 1, &ffi_type_uint, args) == FFI_OK) {
      if (ffi_prep_closure_loc(closure, &cif, puts_binding, stdout, bound_puts) == FFI_OK) {
        rc = bound_puts("Hello World!");
      }
    }
  }
  ffi_closure_free(closure);
  return 0;
}
EOF
}

create_libevent_test_files() {
  cat << EOF > /tmp/${LIBEVENT_TEST_FILE}
#include <event2/event.h>
int main() {
  struct event_base *base;
  base = event_base_new();
  event_base_free(base);
  return 0;
}
EOF
}

create_libuv_test_files() {
  cat << EOF > /tmp/${LIBUV_TEST_FILE}
#include <uv.h>
#include <stdlib.h>
int main() {
  uv_loop_t* loop = malloc(sizeof *loop);
  uv_loop_init(loop);
  uv_loop_close(loop);
  free(loop);
  return 0;
}
EOF
}

create_expat_test_files() {
  cat << EOF > /tmp/${LIBEXPAT_TEST_FILE}
#include <stdio.h>
#include "expat.h"
static void XMLCALL my_StartElementHandler(void *userdata, const XML_Char *name, const XML_Char **atts) {
  printf("tag:%s|", name);
}
static void XMLCALL my_CharacterDataHandler(void *userdata, const XML_Char *s, int len) {
  printf("data:%.*s|", len, s);
}
int main() {
  static const char str[] = "<str>Hello Expat!</str>";
  int result;
  XML_Parser parser = XML_ParserCreate("utf-8");
  XML_SetElementHandler(parser, my_StartElementHandler, NULL);
  XML_SetCharacterDataHandler(parser, my_CharacterDataHandler);
  result = XML_Parse(parser, str, sizeof(str), 1);
  XML_ParserFree(parser);
  return result;
}
EOF
}

create_readline_test_files() {
  cat << EOF > /tmp/${READLINE_TEST_FILE}
#include <stdio.h>
#include <stdlib.h>
#include <readline/readline.h>
int main() {
  printf("%s\\n", readline("test> "));
  return 0;
}
EOF
}

create_xz_test_files() {
  cat << EOF > /tmp/${XZ_TEST_FILE}
Hello XZ Utils!
EOF
}

echo '=== Docker Build Test ==='

# Create temporary dir (if needed)
if ! [ -d /tmp ]; then
  mkdir -m 1777 /tmp
fi

printf '[TEST] Creating the test files... '
create_gcc_test_files
create_glibc_test_files
#create_make_test_files
create_bison_test_files
create_bzip2_test_files
create_perl_test_files
create_autoconf_test_files
create_automake_test_files
create_libffi_test_files
create_libevent_test_files
create_libuv_test_files
create_expat_test_files
create_readline_test_files
create_xz_test_files
echo 'DONE'

printf '[TEST] Check if Binutils were installed... '
if ld --version > /dev/null 2>&1; then
  echo 'OK'
else
  echo 'Failed'
  exit 1
fi

printf '[TEST] Check if GCC is installed... '
if gcc --version > /dev/null 2>&1; then
  echo 'OK'
else
  echo 'Failed'
  exit 2
fi

printf '[TEST] Check if GLibC is installed... '
_libc_so_="$(readlink -f -n "$(gcc --print-file-name=libc.so.6)")"
_ld_so_="$(readlink -f -n "$(gcc --print-file-name=ld-linux-x86-64.so.2)")"
if (${_ld_so_} 2>&1 | grep -q Usage && ${_libc_so_} --version && locale --version) > /dev/null 2>&1; then
  echo 'OK'
else
  echo 'Failed'
  exit 3
fi

printf '[TEST] Check if M4 is installed... '
if m4 --version > /dev/null 2>&1; then
  echo 'OK'
else
  echo 'Failed'
  exit 4
fi

printf '[TEST] Check if Make is installed... '
if make --version > /dev/null 2>&1; then
  echo 'OK'
else
  echo 'Failed'
  exit 6
fi

printf '[TEST] Check if Pkg-config is installed... '
if pkg-config --version > /dev/null 2>&1; then
  echo 'OK'
else
  echo 'Failed'
  exit 7
fi

printf '[TEST] Check if Libtool is installed... '
if libtool --version > /dev/null 2>&1; then
  echo 'OK'
else
  echo 'Failed'
  exit 6
fi

printf '[TEST] Check if Gettext is installed... '
if gettext --version > /dev/null 2>&1; then
  echo 'OK'
else
  echo 'Failed'
  exit 7
fi

printf '[TEST] Check if BZip2 is installed... '
if bzip2 --help > /dev/null 2>&1; then
  echo 'OK'
else
  echo 'Failed'
  exit 8
fi

printf '[TEST] Check if Perl is installed... '
if perl --version > /dev/null 2>&1; then
  echo 'OK'
else
  echo 'Failed'
  exit 9
fi

printf '[TEST] Check if Patch is installed... '
if patch --version > /dev/null 2>&1; then
  echo 'OK'
else
  echo 'Failed'
  exit 10
fi

printf '[TEST] Check if Autoconf is installed... '
if autoconf --version > /dev/null 2>&1; then
  echo 'OK'
else
  echo 'Failed'
  exit 11
fi

printf '[TEST] Check if Automake is installed... '
if automake --version > /dev/null 2>&1; then
  echo 'OK'
else
  echo 'Failed'
  exit 12
fi

printf '[TEST] Check if Bison is installed... '
if bison --version > /dev/null 2>&1; then
  echo 'OK'
else
  echo 'Failed'
  exit 13
fi

printf '[TEST] Check if Patch is installed... '
if patch --version > /dev/null 2>&1; then
  echo 'OK'
else
  echo 'Failed'
  exit 14
fi

printf '[TEST] Check if Expat is installed... '
if xmlwf -v > /dev/null 2>&1; then
  echo 'OK'
else
  echo 'Failed'
  exit 15
fi

printf '[TEST] Check if OpenSSL is installed... '
if openssl version > /dev/null 2>&1; then
  echo 'OK'
else
  echo 'Failed'
  exit 16
fi

printf '[TEST] Check if XZ is installed... '
if xz --version > /dev/null 2>&1; then
  echo 'OK'
else
  echo 'Failed'
  exit 16
fi

printf '[TEST] Check if SQLite is installed... '
if sqlite3 --version > /dev/null 2>&1; then
  echo 'OK'
else
  echo 'Failed'
  exit 17
fi

printf '[TEST] Check if Python is installed... '
if (python3 --version && python --version)> /dev/null 2>&1; then
  echo 'OK'
else
  echo 'Failed'
  exit 18
fi

printf '[TEST] Check if GCC can compile... '
if (gcc -o /tmp/gcc_test /tmp/${GCC_TEST_FILE} && /tmp/gcc_test) > /dev/null 2>&1; then
  echo 'OK'
else
  echo 'Failed'
  exit 19
fi

printf '[TEST] Check if G++ can compile... '
if (g++ -o /tmp/gxx_test /tmp/${GCC_TEST_FILE} && /tmp/gxx_test) > /dev/null 2>&1; then
  echo 'OK'
else
  echo 'Failed'
  exit 20
fi

printf '[TEST] Check if GLibC can be used... '
if (gcc -pthread -o /tmp/glibc_test /tmp/${GLIBC_TEST_FILE} && /tmp/glibc_test) > /dev/null 2>&1; then
  echo 'OK'
else
  echo 'Failed'
  exit 21
fi

printf '[TEST] Check if M4 can be used... '
if (printf 'define(TEST, fscm)\nTEST\n' | m4 | grep -q 'fscm') > /dev/null 2>&1; then
  echo 'OK'
else
  echo 'Failed'
  exit 22
fi

printf '[TEST] Check if Readline can be used... '
if (gcc -lreadline -o /tmp/readline_test /tmp/${READLINE_TEST_FILE} && echo 'Hello Readline!' | /tmp/readline_test | grep -q -e '^test> Hello Readline!$' -e '^Hello Readline!$') > /dev/null 2>&1; then
  echo 'OK'
else
  echo 'Failed'
  exit 23
fi

printf '[TEST] Check if Gettext can be used... '
if (gettext test) > /dev/null 2>&1; then
  echo 'OK'
else
  echo 'Failed'
  exit 24
fi

printf '[TEST] Check if BZip2 can be used... '
if (bzip2 --keep "/tmp/${BZIP2_TEST_FILE}" && mv "/tmp/${BZIP2_TEST_FILE}" "/tmp/${BZIP2_TEST_FILE}.orig" && bunzip2 "/tmp/${BZIP2_TEST_FILE}.bz2" && cmp -s "/tmp/${BZIP2_TEST_FILE}.orig" "/tmp/${BZIP2_TEST_FILE}") > /dev/null 2>&1; then
  echo 'OK'
else
  echo 'Failed'
  exit 25
fi

printf '[TEST] Check if Perl can be used... '
if (perl "/tmp/${PERL_TEST_FILE}") > /dev/null 2>&1; then
  echo 'OK'
else
  echo 'Failed'
  exit 26
fi

printf '[TEST] Check if Automake can be used... '
if (cd /tmp && aclocal && automake --add-missing --foreign) > /dev/null 2>&1; then
  echo 'OK'
else
  echo 'Failed'
  exit 27
fi

printf '[TEST] Check if Autoconf can be used... '
if (cd /tmp && autoconf && ./configure --quiet) > /dev/null 2>&1; then
  echo 'OK'
else
  echo 'Failed'
  exit 28
fi

printf '[TEST] Check if Make can be used... '
#if (make -C /tmp) > /dev/null 2>&1; then
if (cd /tmp && make && ./auto_test) > /dev/null 2>&1; then
  echo 'OK'
else
  echo 'Failed'
  exit 29
fi

printf '[TEST] Check if Libtool can be used... '
if (libtool --quiet --mode=compile --tag=CC cc -c /tmp/${GCC_TEST_FILE} -o /tmp/libtool_test.o && libtool --quiet --mode=link --tag=CC cc /tmp/libtool_test.o -o /tmp/libtool_test && libtool execute /tmp/libtool_test) > /dev/null 2>&1; then
  echo 'OK'
else
  echo 'Failed'
  exit 30
fi

printf '[TEST] Check if Bison can be used... '
if (bison --output=/tmp/bison_test.c /tmp/${BISON_TEST_FILE} && g++ -o /tmp/bison_test /tmp/bison_test.c && echo '((()(())))()' | /tmp/bison_test | grep -q 'pass' && echo '())' | /tmp/bison_test | grep -q 'fail') > /dev/null 2>&1; then
  echo 'OK'
else
  echo 'Failed'
  exit 31
fi

printf '[TEST] Check if Expat (libexpat) can be used... '
if (gcc -lexpat -o /tmp/libexpat_test /tmp/${LIBEXPAT_TEST_FILE} && /tmp/libexpat_test | grep -q '^tag:str|data:Hello Expat!|$') > /dev/null 2>&1; then
  echo 'OK'
else
  echo 'Failed'
  exit 32
fi

printf '[TEST] Check if OpenSSL (and Root Certificates) can be used... '
if (echo | openssl s_client -connect google.com:443 2>&1) | grep -q 'Verify return code: 0 (ok)'; then
  echo 'OK'
else
  echo 'Failed'
  exit 33
fi

printf '[TEST] Check if Libffi can be used... '
if (gcc -lffi -o /tmp/libffi_test /tmp/${LIBFFI_TEST_FILE} && /tmp/libffi_test) > /dev/null 2>&1; then
  echo 'OK'
else
  echo 'Failed'
  exit 34
fi

printf '[TEST] Check if Libevent can be used... '
if (gcc -levent -o /tmp/libevent_test /tmp/${LIBEVENT_TEST_FILE} && /tmp/libevent_test) > /dev/null 2>&1; then
  echo 'OK'
else
  echo 'Failed'
  exit 35
fi

printf '[TEST] Check if Libuv can be used... '
if (gcc -luv -o /tmp/libuv_test /tmp/${LIBUV_TEST_FILE} && /tmp/libuv_test) > /dev/null 2>&1; then
  echo 'OK'
else
  echo 'Failed'
  exit 36
fi

printf '[TEST] Check if XZ can be used... '
if (xz --keep "/tmp/${XZ_TEST_FILE}" && mv "/tmp/${XZ_TEST_FILE}" "/tmp/${XZ_TEST_FILE}.orig" && xz --decompress "/tmp/${XZ_TEST_FILE}.xz" && cmp -s "/tmp/${XZ_TEST_FILE}.orig" "/tmp/${XZ_TEST_FILE}") > /dev/null 2>&1; then
  echo 'OK'
else
  echo 'Failed'
  exit 37
fi

printf '[TEST] Check if Python (including SQLite) can be used... '
if (python -c 'import sqlite3' && python -c 'import _gdbm' && python -c 'import zlib' && pip list --format=columns && pip install --quiet pip-install-test && python -c 'import pip_install_test' && pip uninstall -y pip-install-test) > /dev/null 2>&1; then
  echo 'OK'
else
  echo 'Failed'
  exit 38
fi

printf '[TEST] Check if Busybox is installed... '
if busybox > /dev/null 2>&1; then
  echo 'OK'
else
  echo 'Failed'
  exit 39
fi

exit 0
